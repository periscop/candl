
   /**------ ( ----------------------------------------------------------**
    **       )\                      CAnDL                               **
    **----- /  ) --------------------------------------------------------**
    **     ( * (                    candl.h                              **
    **----  \#/  --------------------------------------------------------**
    **    .-"#'-.        First version: september 8th 2003               **
    **--- |"-.-"| -------------------------------------------------------**
          |     |
          |     |
 ******** |     | *************************************************************
 * CAnDL  '-._,-' the Chunky Analyzer for Dependences in Loops (experimental) *
 ******************************************************************************
 *                                                                            *
 * Copyright (C) 2003-2008 Cedric Bastoul                                     *
 *                                                                            *
 * This is free software; you can redistribute it and/or modify it under the  *
 * terms of the GNU Lesser General Public License as published by the Free    *
 * Software Foundation; either version 3 of the License, or (at your option)  *
 * any later version.                                                         *
 *                                                                            *
 * This software is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY *
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License   *
 * for more details.                                                          *
 *                                                                            *
 * You should have received a copy of the GNU Lesser General Public License   *
 * along with software; if not, write to the Free Software Foundation, Inc.,  *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA                     *
 *                                                                            *
 * CAnDL, the Chunky Dependence Analyser                                      *
 * Written by Cedric Bastoul, Cedric.Bastoul@inria.fr                         *
 *                                                                            *
 ******************************************************************************/


/******************************************************************************
 *  THIS FILE HAS BEEN AUTOMATICALLY GENERATED FROM macros.h.in BY configure  *
 ******************************************************************************/


#ifndef CANDL_MACROS_H
# define CANDL_MACROS_H

# include <piplib/piplib@BITS@.h>

# define CANDL_EQUAL 1
# define CANDL_POSIT 2
# define CANDL_LATER 3
# define CANDL_NEVER 4

# define CANDL_NB_INFOS  3

# define CANDL_MAX_STRING  2048
# define CANDL_TEMP_OUTPUT "candl.temp"

# define CANDL_RELEASE "@PACKAGE_VERSION@"
# define CANDL_VERSION "candl@BITS@"
@DEFINE_HAS_ISL_LIB@

/* Useful macros. */
# define CANDL_max(x,y)    ((x) > (y)? (x) : (y))
# define CANDL_min(x,y)    ((x) < (y)? (x) : (y))

# define CANDL_info(msg)                                                   \
         do {                                                              \
           fprintf(stderr,"[Candl] Info: "msg" (%s).\n", __func__);        \
         } while (0)

# define CANDL_warning(msg)                                                \
         do {                                                              \
           fprintf(stderr,"[Candl] Warning: "msg" (%s).\n", __func__);     \
         } while (0)

# define CANDL_error(msg)                                                  \
         do {                                                              \
           fprintf(stderr,"[Candl] Error: "msg" (%s).\n", __func__);       \
           exit(1);                                                        \
         } while (0)

# define CANDL_malloc(ptr, type, size)                                     \
         do {                                                              \
           if (((ptr) = (type)malloc(size)) == NULL)                       \
             CANDL_error("memory overflow");                               \
         } while (0)

# define CANDL_realloc(ptr, type, size)                                    \
         do {                                                              \
           if (((ptr) = (type)realloc(ptr, size)) == NULL)                 \
             CANDL_error("memory overflow");                               \
         } while (0)

# define CANDL_fail(msg)   { fprintf(stderr, "[Candl] " msg "\n"); exit(1); }


// PipLib types
typedef piplib_int_t@BITS@ piplib_int_t;
typedef PipMatrix@BITS@ PipMatrix;
typedef PipQuast@BITS@ PipQuast;
typedef PipList@BITS@ PipList;
typedef PipVector@BITS@ PipVector;
typedef PipOptions@BITS@ PipOptions;

// PipLib functions
#define pip_options_init pip_options_init@BITS@
#define pip_options_free pip_options_free@BITS@
#define pip_matrix_alloc pip_matrix_alloc@BITS@
#define pip_matrix_free  pip_matrix_free@BITS@
#define pip_quast_init   pip_quast_init@BITS@
#define pip_quast_free   pip_quast_free@BITS@
#define pip_solve        pip_solve@BITS@
#define pip_init         pip_init@BITS@
#define pip_close        pip_close@BITS@

// PipLib int functions
#define CANDL_init(i)         piplib_int_init(i)
#define CANDL_assign(i, v)    piplib_int_assign(i, v)
#define CANDL_set_si(i, v)    piplib_int_set_si(i, v)
#define CANDL_get_si(i)       piplib_int_get_si(i)
#define CANDL_clear(i)        piplib_int_clear(i)
#define CANDL_eq(a, b)        piplib_int_eq(a, b)
#define CANDL_ne(a, b)        piplib_int_ne(a, b)
#define CANDL_add(r, a, b)    piplib_int_add(r, a, b)
#define CANDL_increment(r, i) piplib_int_increment(r, i)
#define CANDL_decrement(r, i) piplib_int_decrement(r, i)
#define CANDL_sub(r, a, b)    piplib_int_sub(r, a, b)
#define CANDL_oppose(r, i)    piplib_int_oppose(r, i)
#define CANDL_zero(i)         piplib_int_zero(i)

#endif // !CANDL_MACROS_H
